<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yu.mybatis.simple.mapper.UserMapper">

    <!-- eviction 收回策略
            LRU 移除最长时间不使用，默认值
            FIFO 先进先出
            SOFT 软使用
            WEAK 弱使用
         flushInterval 刷新间隔 毫秒单位
         size 引用数目 默认1024
         readOnly 只读 只读缓存只看不改
        -->
    <!--<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->

    <resultMap id="userMap" type="com.yu.mybatis.simple.model.SysUser">
        <id column="id" property="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap" extends="userMap" type="com.yu.mybatis.simple.model.SysUser">
        <!-- Role -->
        <association property="role" columnPrefix="role_"
                     resultMap="com.yu.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <resultMap id="userRoleMapSelect" type="com.yu.mybatis.simple.model.SysUser" extends="userMap">
        <association property="role" column="{id=role_id}" fetchType="lazy"
                     select="com.yu.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>

    <resultMap id="userRoleListMap" type="com.yu.mybatis.simple.model.SysUser" extends="userMap">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="com.yu.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <resultMap id="userRoleListMapSelect" type="com.yu.mybatis.simple.model.SysUser" extends="userMap">
        <association property="roleList" column="{userId = id}" fetchType="lazy"
                     select="com.yu.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"/>
    </resultMap>


    <select id="selectById" flushCache="false" resultMap="userMap">
        SELECT *
        FROM sys_user
        WHERE id = #{id}
    </select>

    <select id="selectAll" resultMap="userMap">
        SELECT
            id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        FROM sys_user
    </select>

    <select id="selectRoleByUserId" resultType="com.yu.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time,
            u.user_name,
            u.user_email
        FROM sys_user u
            INNER JOIN sys_user_role ur
                ON u.id = ur.user_id
            INNER JOIN sys_role r
                ON r.id = ur.role_id
        WHERE u.id = #{userId}
    </select>

    <insert id="insert">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg,jdbcType=BLOB},
                #{createTime,jdbcType=TIMESTAMP})
    </insert>

    <insert id="insert3">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="updateById">
        UPDATE sys_user
        SET user_name     = #{userName},
            user_password = #{userPassword},
            user_email    = #{userEmail},
            user_info     = #{userInfo},
            head_img      = #{headImg,jdbcType=BLOB},
            create_time   = #{createTime}
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM sys_user
        WHERE id = #{id}
    </delete>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.yu.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name,
            r.enabled,
            r.create_by,
            r.create_time
        FROM sys_user u
            INNER JOIN sys_user_role ur
                ON u.id = ur.user_id
            INNER JOIN sys_role r
                ON r.id = ur.role_id
        WHERE u.id = #{userId} AND r.enabled = #{enabled}
    </select>

    <select id="selectByUser" resultType="com.yu.mybatis.simple.model.SysUser">
        SELECT
        id,
        user_name,
        user_password,
        user_email,
        user_info,
        head_img,
        create_time
        FROM sys_user
        <where>
            <if test="userName != null and userName !=''">
                AND user_name LIKE concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                AND user_email = #{userEmail}
            </if>
        </where>
    </select>

    <update id="updateBySelective">
        UPDATE sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo !=''">
                user_info = #{userInfo},
            </if>
            <if test="headImg !=null">
                head_img = #{headImg, jdbcType = BLOB},
            </if>
            <if test="createTime !=null">
                create_time = #{createTime, jdbcType = TIMESTAMP},
            </if>
            id = #{id},
        </set>
        WHERE id =#{id}
    </update>

    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(
        user_name,user_password,
        <if test="userEmail != null and userEmail != ''">
            user_email,
        </if>
        user_info,head_img,create_time
        )
        VALUES (
        #{userName},#{userPassword},
        <if test="userEmail != null and userEmail != ''">
            #{userEmail},
        </if>
        #{userInfo},#{headImg,jdbcType = BLOB},
        #{createTime, jdbcType = TIMESTAMP}
        )
    </insert>

    <select id="selectByIdOrUserName" resultMap="userMap">
        SELECT id,user_name,user_password,user_email,user_info,head_img,create_time
        FROM sys_user
        WHERE 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName !=null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultMap="userMap">
        SELECT id,user_name,user_password,user_email,user_info,head_img,create_time
        FROM sys_user
        WHERE id IN
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <insert id="insertList">
        INSERT INTO sys_user (user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (#{user.userName},#{user.userPassword},#{user.userEmail},#{user.userInfo},
            #{user.headImg,jdbcType=BLOB},#{user.createTime,jdbcType = TIMESTAMP})
        </foreach>
    </insert>

    <update id="updateByMap">
        UPDATE sys_user
        SET
        <foreach collection="_parameter" item="val" separator="," index="key">
            ${key} = #{val}
        </foreach>
        WHERE id = #{id}
    </update>

    <select id="selectUserAndRoleById" resultMap="userRoleMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id          role_id,
            r.role_name   role_role_name,
            r.enabled     role_enabled,
            r.create_by   role_create_by,
            r.create_time role_create_time
        FROM sys_user u
            INNER JOIN sys_user_role ur ON ur.user_id = u.id
            INNER JOIN sys_role r ON r.id = ur.role_id
        WHERE u.id = #{id}
    </select>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        FROM sys_user u
            INNER JOIN sys_user_role ur ON ur.user_id = u.id
        WHERE u.id = #{id}
    </select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.create_time,
            r.id             role_id,
            r.role_name      role_role_name,
            r.enabled        role_enabled,
            r.create_by      role_create_by,
            r.create_time    role_create_time,
            p.id             role_privilege_id,
            p.privilege_name role_privilege_privilege_name,
            p.privilege_url  role_privilege_privilege_url
        FROM sys_user u
            INNER JOIN sys_user_role ur ON u.id = ur.user_id
            INNER JOIN sys_role r ON r.id = ur.role_id
            INNER JOIN sys_role_privilege rp ON rp.role_id = r.id
            INNER JOIN sys_privilege p ON p.id = rp.privilege_id
    </select>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time
        FROM sys_user u
        WHERE u.id = #{id}
    </select>

    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
                #{id , mode=IN},
                #{userName, mode=OUT , jdbcType=VARCHAR},
                #{userPassword, mode=OUT , jdbcType=VARCHAR},
                #{userEmail, mode=OUT , jdbcType=VARCHAR},
                #{userInfo, mode=OUT , jdbcType=VARCHAR},
                #{headImg, mode=OUT , jdbcType =BLOB , javaType=_byte[]},
                #{createTime, mode=OUT , jdbcType =TIMESTAMP}
        )}
    </select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
        {
        CALL select_user_page(
                #{userName ,mode= IN},
                #{offset,mode=IN},
                #{limit,mode=IN},
                #{total,mode=OUT,jdbcType=BIGINT}
        )}
    </select>

    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {
        CALL insert_user_and_roles(
                #{user.id,mode=OUT, jdbcType=BIGINT},
                #{user.userName,mode=IN},
                #{user.userPassword,mode=IN},
                #{user.userEmail,mode=IN},
                #{user.userInfo,mode=IN},
                #{user.headImg,mode=IN,jdbcType=BLOB},
                #{user.createTime,mode = OUT,jdbcType=TIMESTAMP},
                #{roleIds,mode=IN}
        )}
    </insert>

    <delete id="deleteUserById" statementType="CALLABLE">
        {
        CALL delete_user_by_id(
                #{id,mode=IN}
        )}
    </delete>
</mapper>